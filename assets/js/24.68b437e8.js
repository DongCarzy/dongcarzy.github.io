(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{412:function(s,t,a){"use strict";a.r(t);var e=a(5),n=Object(e.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"redis数据类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis数据类型"}},[s._v("#")]),s._v(" Redis数据类型")]),s._v(" "),t("p",[t("code",[s._v("Redis")]),s._v(" 作为 "),t("code",[s._v("K-V")]),s._v(" 类型的缓存中间件，其 "),t("code",[s._v("value")]),s._v(" 一共有5中数据类型。 "),t("code",[s._v("string")]),s._v(", "),t("code",[s._v("set")]),s._v(", "),t("code",[s._v("list")]),s._v(", "),t("code",[s._v("sorted-set(zset)")]),s._v(", "),t("code",[s._v("hash")]),s._v(".")]),s._v(" "),t("h2",{attrs:{id:"数据类型查看方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据类型查看方式"}},[s._v("#")]),s._v(" 数据类型查看方式")]),s._v(" "),t("p",[s._v("可以通过 "),t("code",[s._v("type")]),s._v(" 命令查看对应value的类型，例如： "),t("code",[s._v("type key")]),s._v(", 输出结果即为上面的类型中的一种。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("hset stu name zhangsan\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" stu\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("hash")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br")])]),t("p",[s._v("可以通过 "),t("code",[s._v("object encoding")]),s._v(" 来查看value的编码方式。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("object encoding stu\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" listpack\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])]),t("h2",{attrs:{id:"string"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[s._v("#")]),s._v(" String")]),s._v(" "),t("p",[s._v("string是最常用的数据结构， 也是可以用最高的一种数据结构。"),t("code",[s._v("set name lisi")]),s._v("，或者批量操作"),t("code",[s._v("mset")]),s._v(", 即标识存储了一个key为name， 值为 lisi 的键值对， 与我们java中常用的map结构有点类似")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# set key value [EX seconds|PX milliseconds] [NX|XX] [KEEPTTL]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("set")]),s._v(" name lisi\n"),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" name\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" string\nobject coding name\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" embstr "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# 在字节长度小于44个字节时，其编码方式为 embstr， 当大于时则为 raw")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br")])]),t("ul",[t("li",[s._v("EX 表示多少秒后过期，等同命令： SETEX")]),s._v(" "),t("li",[s._v("PX 表示多少毫秒后过期，等同命令：PSETEX")]),s._v(" "),t("li",[s._v("NX 只新增，没有时则设置")]),s._v(" "),t("li",[s._v("XX 只修改，存在时才设置")])]),s._v(" "),t("h3",{attrs:{id:"bitmap类型"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bitmap类型"}},[s._v("#")]),s._v(" bitmap类型")]),s._v(" "),t("p",[s._v("bitmap也属于string类型的操作，可以通过 "),t("code",[s._v("setbit(设置bit位为1)")]),s._v(", "),t("code",[s._v("bitcount(统计1的数量)")]),s._v(", "),t("code",[s._v("bitpos(定位查找)")]),s._v(", "),t("code",[s._v("bitop(与或非操作)")]),s._v(" 等对值做一些二进制操作，在设置时，是按照从左右到的字节数去设置的。")]),s._v(" "),t("div",{staticClass:"language-bash line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" setbit bt "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" setbit bt "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" setbit bt "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("integer"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(" \n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1:637"),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("9")]),s._v(">")]),s._v(' get bt\n"'),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("xc0"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),s._v("x1\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("p",[s._v("输出结果解析成二进制就是 "),t("code",[s._v("1100 0000 0001 0000")]),s._v("， 也就是说 setbit 的 offset 表示的是从左往右的偏移量， 忘掉 我们的所谓的"),t("code",[s._v("大端小端问题")])]),s._v(" "),t("h2",{attrs:{id:"list"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#list"}},[s._v("#")]),s._v(" list")]),s._v(" "),t("p",[s._v("list是一个双向链表结构， 在其 "),t("code",[s._v("key")]),s._v(" 中会存储相关的 "),t("code",[s._v("head")]),s._v(" 和 "),t("code",[s._v("tail")]),s._v(" 节点，因此我们可以看见他的list操作命令会有 "),t("code",[s._v("left")]),s._v(" 与 "),t("code",[s._v("right")]),s._v("的区分，他们的效率是一样的， 也正是因为这个数据结构，我们可以拿 "),t("code",[s._v("list")]),s._v(" 作为 队列或者栈的实现。")]),s._v(" "),t("h2",{attrs:{id:"set"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set"}},[s._v("#")]),s._v(" set")]),s._v(" "),t("p",[s._v("无序集合， 类似与java中的 "),t("code",[s._v("HashSet")])]),s._v(" "),t("ul",[t("li",[t("code",[s._v("sinter<store>")]),s._v("交集，加上 store 则表示将结果放入新的集合中。")]),s._v(" "),t("li",[t("code",[s._v("sunion<store>")]),s._v("并集，加上 store 则表示将结果放入新的集合中。")]),s._v(" "),t("li",[t("code",[s._v("srandmenber key count")]),s._v(" 表示取N个随机元素，如果count为负数，表示可以重复取，整数表示不能重复")])]),s._v(" "),t("h2",{attrs:{id:"zset"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zset"}},[s._v("#")]),s._v(" zset")]),s._v(" "),t("p",[s._v("有序集合， "),t("code",[s._v("zadd k score member")]),s._v("， 会按照 "),t("code",[s._v("score")]),s._v(" 值排序，且不允许重复的成员。内部通过跳跃表实现高效搜索排序(logN)")]),s._v(" "),t("h2",{attrs:{id:"hash"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hash"}},[s._v("#")]),s._v(" hash")]),s._v(" "),t("p",[s._v("hash结构的值类似与java中的"),t("code",[s._v("hashmap")]),s._v(", 可以用来表述java中的对象，例如: "),t("code",[s._v("hset num101 name 张三 age 18 sex 1")]),s._v(",  通过 "),t("code",[s._v("hgetall num101")]),s._v(" 即可查看全部的成员属性了。")])])}),[],!1,null,null,null);t.default=n.exports}}]);